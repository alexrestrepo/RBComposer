#tag ClassClass RelationalFramesCanvasInherits canvas	#tag Event		Function KeyDown(Key As String) As Boolean		  if asc(key) = 9 then SelectNextFrame		End Function	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  me.SetFocus		  		  // clear selections		  dim previousSelection as contentframe = selectedFrame		  mselectedFrame = nil		  sourceObject = nil		  		  dim objectHit as CalculatedHeightRect		  dim frame as ContentFrame		  dim objectIndex as integer		  		  // find the selected object		  for objectIndex = frames.Ubound DownTo 0		    frame = frames(objectIndex)		    objectHit = frame.MouseDown(x + scrollx, y + scrolly)		    if objectHit <> nil then exit for		  next		  		  if objectHit isa ContentFrame then		    // if it's a frame, bring it to the front		    mselectedFrame = contentFrame(objectHit)		    frames.Remove(objectIndex)		    frames.Append(selectedFrame)		    		  elseif objectHit isa ContentObject then		    sourceObject = ContentObject(objectHit)		    		  end if		  		  if selectedFrame <> previousSelection then FrameSelected(selectedFrame)		  		  lastMouseX = x		  lastMouseY = y		  		  me.Refresh(False)		  Return objectHit <> nil		End Function	#tag EndEvent	#tag Event		Sub MouseDrag(X As Integer, Y As Integer)		  if selectedFrame <> nil then		    // drag frame		    selectedFrame.Offset(x - lastMouseX, y - lastMouseY)		    		  elseif sourceObject <> nil then		    // find a possible target for a link...		    dim objectIndex as integer		    dim objectHit as contentObject		    targetObject = nil		    		    for objectIndex = frames.Ubound DownTo 0		      objectHit = frames(objectIndex).MouseDrag(x + scrollx, y + scrolly)		      if objectHit <> nil and objectHit <> sourceObject then exit for		    next		    		    if objectHit <> nil and ShouldAllowLink(targetObject, objectHit) then		      targetObject = objectHit		    end if		  end if		  		  lastMouseX = x		  lastMouseY = y		  		  Refresh(False)		End Sub	#tag EndEvent	#tag Event		Sub MouseUp(X As Integer, Y As Integer)		  // perform the link		  if sourceObject <> nil and targetObject <> nil then		    sourceObject.AddOutputObject(targetObject)		    LinkPerformed(sourceObject, targetObject)		  end if		  		  // reset selections		  sourceObject = nil		  targetObject = nil		  Refresh(False)		End Sub	#tag EndEvent	#tag Event		Function MouseWheel(X As Integer, Y As Integer, deltaX as Integer, deltaY as Integer) As Boolean		  Scrollx = scrollx + deltax		  Scrolly = scrolly + deltay		  return MouseWheel(x, y, deltax, deltay)		End Function	#tag EndEvent	#tag Event		Sub Open()		  #if TargetWin32		    me.DoubleBuffer = true		  #endif		  		  me.AcceptFocus = true		  me.AcceptTabs = true		  Open		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics, areas() As REALbasic.Rect)		  // background		  g.ForeColor = &cffffff		  g.FillRect 0, 0, g.Width, g.Height		  		  // grid... you should parametrize this		  for i as Integer = 0 to max(g.Width, g.Height) step 10		    if i mod 50 = 0 then		      g.ForeColor = GrayColor(0.9)		    else		      g.ForeColor = GrayColor(0.95)		    end if		    if i < g.Height then		      g.DrawLine 0, i, g.Width, i		    end if		    if i < g.Width then		      g.DrawLine i, 0, i, g.Height		    end if		  next		  		  // now, draw all links, so they appear below every frame...		  for each frame as ContentFrame in frames		    frame.DrawAllLinks(g, selectedFrame, scrollx, scrolly)		  next		  		  // now, draw the frames, and highlight the currently selected frame...		  for each frame as ContentFrame in frames		    if selectedFrame = frame then		      g.ForeColor = linkColor		      g.PenWidth = 2		      g.PenHeight = 2		      if selectedFrame.rounded then		        g.DrawRoundRect frame.x - selectionWidth - scrollx, frame.y - selectionWidth - scrolly, frame.width + 2 * selectionWidth, frame.height + 2 * selectionWidth, 14, 14		      else		        g.DrawRect frame.x - selectionWidth - scrollx, frame.y - selectionWidth - scrolly, frame.width + 2 * selectionWidth, frame.height + 2 * selectionWidth		      end if		      g.PenWidth = 1		      g.PenHeight = 1		      g.ForeColor = &c0		    end if		    frame.Paint(g, scrollx, scrolly)		  next		  		  // if there's a link being performed, paint it...		  if sourceObject <> nil then		    dim linkColor as color = &cffffff		    if targetObject <> nil then linkColor = RelationalFrames.LinkColor		    drawLink(g, sourceObject.outputArea.x + 3 + sourceObject.parent.x - scrollx, sourceObject.outputArea.y + 3  + sourceObject.parent.y - scrolly, lastMousex, lastMouseY, linkColor)		  end if		  		  // finally, draw a frame.		  g.ForeColor = &c888888		  g.DrawRect 0,0,g.Width,g.Height		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub AddFrame(frame as contentFrame)		  frames.Append frame		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SelectFrame(frame as ContentFrame)		  mselectedFrame = frame		  FrameSelected(Frame)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SelectNextFrame()		  if frames.Ubound < 0 then Return		  		  mselectedFrame = frames(0)		  frames.Remove(0)		  frames.Append(selectedFrame)		  me.Refresh(False)		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event FrameSelected(frame as contentFrame)	#tag EndHook	#tag Hook, Flags = &h0		Event LinkPerformed(fromObject as contentObject, toObject as contentObject)	#tag EndHook	#tag Hook, Flags = &h0		Event MouseWheel(X as integer, Y as integer, deltaX as integer, deltaY as Integer) As Boolean	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event ShouldAllowLink(fromObject as ContentObject, toObject as ContentObject) As Boolean	#tag EndHook	#tag Property, Flags = &h0		frames() As ContentFrame	#tag EndProperty	#tag Property, Flags = &h21		Private lastMouseX As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private lastMouseY As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mscrollx As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mscrolly As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mselectedFrame As ContentFrame	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mscrollx			End Get		#tag EndGetter		#tag Setter			Set			  mscrollx = max(value, 0)			  self.Refresh(False)			End Set		#tag EndSetter		scrollx As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mscrolly			End Get		#tag EndGetter		#tag Setter			Set			  mscrolly = max(value, 0)			  self.Refresh(False)			End Set		#tag EndSetter		scrolly As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mselectedFrame			End Get		#tag EndGetter		selectedFrame As ContentFrame	#tag EndComputedProperty	#tag Property, Flags = &h21		Private sourceObject As contentObject	#tag EndProperty	#tag Property, Flags = &h21		Private targetObject As contentObject	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Transparent"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			EditorType="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			EditorType="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			EditorType="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Type="String"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			EditorType="String"		#tag EndViewProperty		#tag ViewProperty			Name="scrollx"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="scrolly"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			EditorType="String"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass